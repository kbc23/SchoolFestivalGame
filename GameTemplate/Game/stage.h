#pragma once
#include "model_render.h"

#include "player.h"

class Stage : public IGameObject
{
public:
    Stage();
    ~Stage();
    bool Start() override final;
    void Update() override final;


public:
    ////////////////////////////////////////////////////////////
    // 初期設定
    ////////////////////////////////////////////////////////////

    /**
     * @brief ステージの作成処理
    */
    void StageCreate();

    ////////////////////////////////////////////////////////////
    // ブロックの移動
    ////////////////////////////////////////////////////////////

    /**
     * @brief プレイヤーの移動に応じてブロックを動かす。
     * @param pNum プレイヤーの番号
     * @param moveNum ブロックの動く量
     * @return ブロックを動かしたかどうか
    */
    bool MoveBlock(const int pNum, const int moveNum);

    ////////////////////////////////////////////////////////////
    // タイマー
    ////////////////////////////////////////////////////////////

    /**
     * @brief 操作不能状態のタイマーのカウント
     * @param pNum プレイヤーの番号
    */
    void ReturnOperationTimer(const int pNum);

    ////////////////////////////////////////////////////////////
    // ブロックごとの処理
    ////////////////////////////////////////////////////////////

    /**
     * @brief プレイヤーが乗っているブロックを判別
     * @param pNum プレイヤー番号
    */
    void CheckBlock(const int pNum);

    //////////////////////////////
    // 青色のブロック
    //////////////////////////////

    /**
     * @brief 青色のブロックの上に行ったときの処理    
     * @param pNum プレイヤー番号
    */
    void BlueBlock(const int pNum);

    /**
     * @brief 青色のブロックの上に行ったときのアニメーション
     * @param pNum プレイヤー番号
    */
    void BlueBlockAnimation(const int pNum);

    /**
     * @brief 前にいた位置のブロックに戻る処理
     * @param pNum プレイヤーの番号
    */
    void ReturnBlock(const int pNum);

    ////////////////////////////////////////////////////////////
    // ゴール時の処理
    ////////////////////////////////////////////////////////////

    /**
     * @brief ゴール時の処理
    */
    void GoalBlock();



public: //Get関数
    /**
     * @brief m_activeOperation[pNum]のGet関数
     * @param pNum プレイヤー番号
     * @return プレイヤー番号[pNum]が、操作可能か
    */
    const bool GetmActiveOperation(const int pNum)
    {
        return m_activeOperation[pNum];
    }


public: //enum
    //ブロックの種類
    enum StageData
    {
        greenBlock,
        blueBlock,
        yellowBlock,
        StageDataMax
    };



private: //constant
    static const int m_MAX_BLOCK = 50;      //１レーンのブロックの最大数
    static const int m_START_BLOCK = 0;     //スタート位置のブロックの番号
    static const int m_INIT_RANK = 1;       //プレイヤーに渡す順位データの初期値

private: //data menber

    ////////////////////////////////////////////////////////////
    // クラスのオブジェクト
    ////////////////////////////////////////////////////////////

    Player* m_player = nullptr;

    ////////////////////////////////////////////////////////////
    // ブロックのデータ
    ////////////////////////////////////////////////////////////

    int m_stageData[Player::PlayerNumberMax][m_MAX_BLOCK] = { greenBlock }; //ステージのデータを保存する配列
    //[プレイヤー番号][ステージのマスの数]
    ModelRender* m_modelRender[Player::PlayerNumberMax][m_MAX_BLOCK] = { nullptr };
 
    //プレイヤーが何個目のブロックにいるか
    int m_playerBlockPosition[Player::PlayerNumberMax] = { m_START_BLOCK,m_START_BLOCK,m_START_BLOCK,m_START_BLOCK };
    //プレイヤーの前にいたブロックの番号
    int m_playerBeforeBlockPosition[Player::PlayerNumberMax] = { m_START_BLOCK,m_START_BLOCK,m_START_BLOCK,m_START_BLOCK };

    ////////////////////////////////////////////////////////////
    // プレイヤーの操作状況
    ////////////////////////////////////////////////////////////

    //プレイヤーが操作可能か
    bool m_activeOperation[Player::PlayerNumberMax] = { true, true, true, true };
    //プレイヤーの操作復帰のタイマー
    int m_timerReturnOperation[Player::PlayerNumberMax] = { 0, 0, 0, 0 };
    //プレイヤーの操作不可状態に対する耐性があるか
    bool m_resistanceImpossibleOperation[Player::PlayerNumberMax] = { false, false, false, false };

    //青いブロックに行ったときのアニメーションをおこなっているか
    bool m_flagAnimationBlueBlock[Player::PlayerNumberMax] = { false, false, false, false };
    //青いブロックに行ったときのアニメーションのタイマー
    int m_timerAnimationBlueBlock[Player::PlayerNumberMax] = { 0, 0, 0, 0 };
    //プレイヤーが操作可能か（青色のブロックVer）
    bool m_activeOperationVersionBlue[Player::PlayerNumberMax] = { true, true, true, true };

    int m_nowRank = m_INIT_RANK; //プレイヤーの順位データに渡すデータ
};